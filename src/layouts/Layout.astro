---
export interface Props {
  title?: string;
}

const { title = "Влад - Хелс-коуч" } = Astro.props;
const base = import.meta.env.BASE_URL;

// Функция для правильного формирования ссылок
function getLink(path: string) {
  if (path === '') return base; // главная страница
  return base.endsWith('/') ? `${base}${path}/` : `${base}/${path}/`;
}
---

<!doctype html>
<html lang="ru">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href={`${base}favicon.svg`} />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		<link rel="preconnect" href="https://fonts.googleapis.com">
		<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
		<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400&display=swap" rel="stylesheet">
	</head>
	<body>
		<nav class="navbar">
			<div class="nav-container">
				<div class="nav-links">
					<a href={getLink('')}>Главная</a>
					<a href={getLink('about')}>Обо мне</a>
					<a href={getLink('services')}>Мои услуги</a>
					<a href={getLink('faq')}>FAQ</a>
				</div>
			</div>
		</nav>
		<main>
			<slot />
		</main>
		<footer class="footer">
			<div class="footer-content">
				<p>&copy; 2025 Влад - Хелс-коуч. Все права защищены.</p>
			</div>
		</footer>

		<!-- Модальное окно для записи -->
		<div id="booking-modal" class="modal-overlay">
			<div class="modal-content">
				<div class="modal-header">
					<h2>Записаться на консультацию</h2>
					<button class="modal-close" onclick="closeBookingModal()">&times;</button>
				</div>
				<form id="booking-form" class="booking-form" method="POST" action="/_actions/sendEmail">
					<input type="hidden" id="request-type" name="requestType" value="Записаться на консультацию">
					<div class="form-group">
						<label for="name">Имя *</label>
						<input type="text" id="name" name="name" required>
					</div>
					<div class="form-group">
						<label for="contact">Контакт *</label>
						<input type="text" id="contact" name="contact" placeholder="телефон, емейл, телеграм" required>
					</div>
					<button type="submit" class="submit-button">Отправить</button>
				</form>
				<div id="success-message" class="success-message" style="display: none;">
					<div class="success-content">
						<div class="success-icon">
							<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M9 12l2 2 4-4"/>
								<circle cx="12" cy="12" r="10"/>
							</svg>
						</div>
						<h3>Спасибо за доверие!</h3>
						<p>Я свяжусь с тобой в течение 24 часов</p>
						<button onclick="closeBookingModal()" class="close-success-button">Закрыть</button>
					</div>
				</div>
			</div>
		</div>

		<!-- Модальное окно для вопросов -->
		<div id="question-modal" class="modal-overlay">
			<div class="modal-content">
				<div class="modal-header">
					<h2>Задать вопрос</h2>
					<button class="modal-close" onclick="closeQuestionModal()">&times;</button>
				</div>
				<form id="question-form" class="booking-form" method="POST" action="/_actions/sendEmail">
					<input type="hidden" id="question-request-type" name="requestType" value="Задать вопрос">
					<div class="form-group">
						<label for="question-name">Имя *</label>
						<input type="text" id="question-name" name="name" required>
					</div>
					<div class="form-group">
						<label for="question-contact">Контакт *</label>
						<input type="text" id="question-contact" name="contact" placeholder="телефон, емейл, телеграм" required>
					</div>
					<div class="form-group">
						<label for="question-text">Вопрос *</label>
						<textarea id="question-text" name="question" rows="5" required></textarea>
					</div>
					<button type="submit" class="submit-button">Отправить</button>
				</form>
				<div id="question-success-message" class="success-message" style="display: none;">
					<div class="success-content">
						<div class="success-icon">
							<svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
								<path d="M9 12l2 2 4-4"/>
								<circle cx="12" cy="12" r="10"/>
							</svg>
						</div>
						<h3>Спасибо за вопрос!</h3>
						<p>Я отвечу тебе в течение 24 часов</p>
						<button onclick="closeQuestionModal()" class="close-success-button">Закрыть</button>
					</div>
				</div>
			</div>
		</div>
	</body>
</html>

<style>
	:root {
		/* Новая премиальная палитра */
		--bg-color: #F5F0E8;
		--bg-light: #FFFFFF;
		--bg-warm: #FFFFFF;
		--bg-secondary: #D4C5B0;

		/* Текст */
		--text-color: #2C2C2C;
		--text-light: #5A5A5A;

		/* Акценты (медный как основной) */
		--accent-copper: #A67C52;
		--accent-easy: #A67C52;
		--accent-normal: #A67C52;
		--accent-hard: #2C2C2C;
		--accent-hard-dark: #2C2C2C;

		/* Рамки */
		--border-color: #C5C0B8;

		/* Для совместимости с существующим кодом */
		--primary-color: #2C2C2C;
		--primary-dark: #2C2C2C;
		--secondary-color: #A67C52;
	}

	* {
		margin: 0;
		padding: 0;
		box-sizing: border-box;
	}

	html,
	body {
		font-family: -apple-system, BlinkMacSystemFont, 'Helvetica Neue', sans-serif;
		line-height: 1.6;
		font-weight: 300;
		color: var(--text-color);
		background: var(--bg-color);
		letter-spacing: -0.01em;
	}

	.navbar {
		background: var(--bg-color);
		border-bottom: 1px solid var(--border-color);
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		z-index: 1000;
	}

	.nav-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
		display: flex;
		justify-content: space-between;
		align-items: center;
		height: 70px;
	}

	.nav-logo {
		font-size: 1.5rem;
		font-weight: 700;
		color: var(--primary-color);
		text-decoration: none;
		transition: color 0.3s ease;
	}

	.nav-logo:hover {
		color: var(--primary-dark);
	}

	.nav-links {
		display: flex;
		gap: 30px;
	}

	.nav-links a {
		color: var(--text-color);
		text-decoration: none;
		font-weight: 400;
		transition: color 0.3s ease;
		position: relative;
		font-size: 13px;
		letter-spacing: 0.5px;
	}

	.nav-links a:hover {
		color: var(--accent-copper);
	}

	main {
		margin-top: 70px;
		min-height: calc(100vh - 140px);
	}

	.footer {
		background: var(--bg-warm);
		border-top: 1px solid var(--border-color);
		padding: 30px 0;
		margin-top: 50px;
	}

	.footer-content {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 20px;
		text-align: center;
		color: var(--text-light);
	}

	@media (max-width: 768px) {
		.nav-container {
			padding: 0 15px;
		}

		.nav-links {
			gap: 20px;
		}

		.nav-links a {
			font-size: 0.9rem;
		}
	}

	/* Стили для модального окна */
	.modal-overlay {
		position: fixed;
		top: 0;
		left: 0;
		width: 100%;
		height: 100%;
		background: rgba(0, 0, 0, 0.5);
		backdrop-filter: blur(5px);
		display: none;
		justify-content: center;
		align-items: center;
		z-index: 10000;
		animation: fadeIn 0.3s ease-out;
	}

	.modal-overlay.active {
		display: flex;
	}

	.modal-content {
		background: white;
		border-radius: 2px;
		padding: 0;
		max-width: 500px;
		width: 90%;
		max-height: 90vh;
		overflow: hidden;
		border: 1px solid var(--border-color);
		transform: scale(0.9);
		animation: modalSlideIn 0.3s ease-out forwards;
	}

	.modal-header {
		background: var(--bg-color);
		color: var(--text-color);
		padding: 25px 30px;
		display: flex;
		justify-content: space-between;
		align-items: center;
		border-bottom: 1px solid var(--border-color);
	}

	.modal-header h2 {
		margin: 0;
		font-size: 1.5rem;
		font-weight: 300;
		letter-spacing: -0.5px;
	}

	.modal-close {
		background: none;
		border: none;
		color: var(--text-color);
		font-size: 2rem;
		cursor: pointer;
		padding: 0;
		width: 40px;
		height: 40px;
		display: flex;
		align-items: center;
		justify-content: center;
		transition: opacity 0.3s ease;
	}

	.modal-close:hover {
		opacity: 0.7;
	}

	.booking-form {
		padding: 30px;
	}

	.form-group {
		margin-bottom: 20px;
	}

	.form-group label {
		display: block;
		margin-bottom: 8px;
		font-weight: 600;
		color: var(--text-color);
	}

	.form-group input,
	.form-group textarea {
		width: 100%;
		padding: 12px 16px;
		border: 1px solid var(--border-color);
		border-radius: 2px;
		font-size: 1rem;
		transition: border-color 0.3s ease;
		font-family: inherit;
		font-weight: 300;
	}

	.form-group textarea {
		resize: vertical;
		min-height: 120px;
	}

	.form-group input:focus,
	.form-group textarea:focus {
		outline: none;
		border-color: var(--accent-copper);
	}

	.submit-button {
		width: 100%;
		background: var(--text-color);
		color: var(--bg-color);
		border: none;
		padding: 15px;
		border-radius: 2px;
		font-size: 13px;
		font-weight: 500;
		cursor: pointer;
		transition: background-color 0.3s ease;
		font-family: inherit;
		letter-spacing: 1px;
		text-transform: uppercase;
	}

	.submit-button:hover {
		background: var(--accent-copper);
		color: white;
	}

	.submit-button:disabled {
		background: #ccc;
		cursor: not-allowed;
		transform: none;
		box-shadow: none;
	}

	.success-message {
		padding: 40px 30px;
		text-align: center;
	}

	.success-content {
		display: flex;
		flex-direction: column;
		align-items: center;
		gap: 20px;
	}

	.success-icon {
		background: var(--bg-color);
		color: var(--accent-copper);
		width: 80px;
		height: 80px;
		border-radius: 2px;
		display: flex;
		align-items: center;
		justify-content: center;
		border: 1px solid var(--border-color);
	}

	.success-content h3 {
		margin: 0;
		color: var(--text-color);
		font-size: 1.4rem;
		font-weight: 300;
		letter-spacing: -0.5px;
	}

	.success-content p {
		margin: 0;
		color: var(--text-light);
		font-size: 1rem;
	}

	.close-success-button {
		background: var(--text-color);
		color: var(--bg-color);
		border: none;
		padding: 12px 30px;
		border-radius: 2px;
		font-size: 13px;
		font-weight: 500;
		cursor: pointer;
		transition: opacity 0.3s ease;
		font-family: inherit;
		letter-spacing: 1px;
		text-transform: uppercase;
	}

	.close-success-button:hover {
		opacity: 0.85;
	}

	@keyframes modalSlideIn {
		from {
			transform: scale(0.9) translateY(-50px);
			opacity: 0;
		}
		to {
			transform: scale(1) translateY(0);
			opacity: 1;
		}
	}

	@media (max-width: 768px) {
		.modal-content {
			width: 95%;
			margin: 20px;
		}

		.modal-header {
			padding: 20px 25px;
		}

		.modal-header h2 {
			font-size: 1.3rem;
		}

		.booking-form,
		.success-message {
			padding: 25px 20px;
		}
	}
</style>

<script is:inline>
	// Функции для работы с модальным окном записи
	function openBookingModal(title) {
		const modal = document.getElementById('booking-modal');
		const form = document.getElementById('booking-form');
		const successMessage = document.getElementById('success-message');
		const modalTitle = modal.querySelector('.modal-header h2');
		const requestTypeInput = document.getElementById('request-type');

		// Установка заголовка
		const finalTitle = title || 'Записаться на консультацию';
		modalTitle.textContent = finalTitle;
		if (requestTypeInput) {
			requestTypeInput.value = finalTitle;
		}

		// Сброс формы и скрытие сообщения об успехе
		form.style.display = 'block';
		successMessage.style.display = 'none';
		form.reset();
		// После reset нужно снова установить requestType
		if (requestTypeInput) {
			requestTypeInput.value = finalTitle;
		}

		modal.classList.add('active');
		document.body.style.overflow = 'hidden';
	}

	function closeBookingModal() {
		const modal = document.getElementById('booking-modal');
		modal.classList.remove('active');
		document.body.style.overflow = 'auto';
	}

	// Закрытие модального окна при клике на overlay
	document.addEventListener('DOMContentLoaded', function() {
		const modal = document.getElementById('booking-modal');
		const modalContent = modal.querySelector('.modal-content');
		
		modal.addEventListener('click', function(e) {
			if (e.target === modal) {
				closeBookingModal();
			}
		});

		// Закрытие по Escape
		document.addEventListener('keydown', function(e) {
			if (e.key === 'Escape' && modal.classList.contains('active')) {
				closeBookingModal();
			}
		});

		// Обработка отправки формы
		const form = document.getElementById('booking-form');
		form.addEventListener('submit', async function(e) {
			e.preventDefault();
			
			const submitButton = form.querySelector('.submit-button');
			const originalText = submitButton.textContent;
			submitButton.textContent = 'Отправляю...';
			submitButton.disabled = true;
			
			try {
				const formData = new FormData(form);
				const response = await fetch('/_actions/sendEmail', {
					method: 'POST',
					body: formData
				});
				
				if (response.ok) {
					// Если статус ответа 200, значит всё прошло успешно
					form.style.display = 'none';
					const successMessage = document.getElementById('success-message');
					successMessage.style.display = 'block';
				} else {
					// Если статус не 200, пытаемся получить детали ошибки
					const result = await response.json();
					const errorMessage = result?.error?.message || 'Произошла ошибка при отправке';
					alert(errorMessage);
					submitButton.textContent = originalText;
					submitButton.disabled = false;
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Произошла ошибка при отправке заявки. Попробуйте снова.');
				submitButton.textContent = originalText;
				submitButton.disabled = false;
			}
		});

		// Обработка модального окна для вопросов
		const questionModal = document.getElementById('question-modal');
		const questionModalContent = questionModal.querySelector('.modal-content');

		questionModal.addEventListener('click', function(e) {
			if (e.target === questionModal) {
				closeQuestionModal();
			}
		});

		// Закрытие по Escape
		document.addEventListener('keydown', function(e) {
			if (e.key === 'Escape' && questionModal.classList.contains('active')) {
				closeQuestionModal();
			}
		});

		// Обработка отправки формы вопросов
		const questionForm = document.getElementById('question-form');
		questionForm.addEventListener('submit', async function(e) {
			e.preventDefault();

			const submitButton = questionForm.querySelector('.submit-button');
			const originalText = submitButton.textContent;
			submitButton.textContent = 'Отправляю...';
			submitButton.disabled = true;

			try {
				const formData = new FormData(questionForm);
				const response = await fetch('/_actions/sendEmail', {
					method: 'POST',
					body: formData
				});

				if (response.ok) {
					// Если статус ответа 200, значит всё прошло успешно
					questionForm.style.display = 'none';
					const successMessage = document.getElementById('question-success-message');
					successMessage.style.display = 'block';
				} else {
					// Если статус не 200, пытаемся получить детали ошибки
					const result = await response.json();
					const errorMessage = result?.error?.message || 'Произошла ошибка при отправке';
					alert(errorMessage);
					submitButton.textContent = originalText;
					submitButton.disabled = false;
				}
			} catch (error) {
				console.error('Error:', error);
				alert('Произошла ошибка при отправке вопроса. Попробуйте снова.');
				submitButton.textContent = originalText;
				submitButton.disabled = false;
			}
		});
	});

	// Функции для работы с модальным окном вопросов
	function openQuestionModal() {
		const modal = document.getElementById('question-modal');
		const form = document.getElementById('question-form');
		const successMessage = document.getElementById('question-success-message');

		// Сброс формы и скрытие сообщения об успехе
		form.style.display = 'block';
		successMessage.style.display = 'none';
		form.reset();

		modal.classList.add('active');
		document.body.style.overflow = 'hidden';
	}

	function closeQuestionModal() {
		const modal = document.getElementById('question-modal');
		modal.classList.remove('active');
		document.body.style.overflow = 'auto';
	}
</script>
